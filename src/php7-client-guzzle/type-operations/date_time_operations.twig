{{ writeFile(typeOperationFolder ~ 'DateTimeImmutableOperations.php') }}
<?php declare(strict_types=1);

namespace {{ typeOperationNamespace }};

use DateTimeImmutable;
use Exception;

class DateTimeImmutableOperations {
  public static function createFromDecoded(?string $decoded): ?DateTimeImmutable {
    if ($decoded === null) {
      return null;
    }
    return DateTimeImmutable::createFromFormat(DateTimeImmutable::ATOM,$decoded);
  }

  public static function prepareToEncode(?DateTimeImmutable $value): ?string {
    if ($value === null) {
      return null;
    }
    return $value->format(DateTimeImmutable::ATOM);
  }

  public static function decodeJson(?string $value): mixed {
    if ($value === null) {
      return null;
    }
    return json_decode($value);
  }

  public static function encodeJson(?DateTimeImmutable $value): ?string {
    if ($value === null) {
      return null;
    }
    return json_encode(self::prepareToEncode($value), JSON_UNESCAPED_UNICODE);
  }

  public static function decodeSimple(?string $value): mixed {
    if ($value === null) {
      return null;
    }
    return $value;
  }

  public static function encodeSimple(?DateTimeImmutable $value): ?string {
    if ($value === null) {
      return null;
    }
    return $value->format(DateTimeImmutable::ATOM);
  }

  /** @throws Exception */
  public static function validate(mixed $decoded, string $name, bool $required): void {
    if ($decoded === null) {
      if ($required === true) {
        throw new Exception($name . ' is not found');
      }
      return;
    }
    $dateTime = DateTimeImmutable::createFromFormat(DateTimeImmutable::ATOM, $decoded);
    if ($dateTime === null) {
      throw new Exception($name . ' is not a date-time');
    }
  }

  public static function createForTest(): DateTimeImmutable {
    return new DateTimeImmutable();
  }
}