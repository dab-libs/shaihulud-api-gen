{{ writeFile(typeOperationFolder ~ 'BoolOperations.php') }}
<?php declare(strict_types=1);

namespace {{ typeOperationNamespace }};

use Exception;

class BoolOperations {
  public static function createFromDecoded(?bool $decoded): ?bool {
    if ($decoded === null) {
      return null;
    }
    return boolval($decoded);
  }

  public static function prepareToEncode(?bool $value): ?bool {
    if ($value === null) {
      return null;
    }
    return boolval($value);
  }

  public static function decodeJson(?string $value): mixed {
    if ($value === null) {
      return null;
    }
    return json_decode($value);
  }

  public static function encodeJson(?bool $value): ?string {
    if ($value === null) {
      return null;
    }
    return json_encode(self::prepareToEncode($value), JSON_UNESCAPED_UNICODE);
  }

  public static function decodeSimple(?string $value): mixed {
    if ($value === null) {
      return null;
    }
    $jsonDecoded = json_decode($value);
    if ($jsonDecoded === null) {
      return $value;
    }
    else {
      return $jsonDecoded;
    }
  }

  public static function encodeSimple(?bool $value): ?string {
    if ($value === null) {
      return null;
    }
    return ($value ? 'true' : 'false');
  }

  /** @throws Exception */
  public static function validate(mixed $decoded, string $name, bool $required): void {
    if ($decoded === null) {
      if ($required === true) {
        throw new Exception($name . ' is not found');
      }
      return;
    }
    if (!is_bool($decoded)) {
      throw new Exception($name . ' is not a bool');
    }
  }

  public static function createForTest(): bool {
    return true;
  }
}
