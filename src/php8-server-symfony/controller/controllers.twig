{% for controller in controllers %}
{%   set request = controller.request %}
{{   writeFile(controllerFolder ~ controller.controllerType ~ '.php') }}
<?php declare(strict_types=1);

namespace {{ controllerNamespace }};

use Exception;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Psr\Log\LoggerInterface;
use Doctrine\ORM\EntityManagerInterface;
use {{ publicNamespace }}\{{ controller.actionType }};
{%     for result in controller.results %}
use {{ publicNamespace }}\{{ result.type }};
{%     endfor %}
{%     for type in controller.importedOperationsTypes %}
use {{ typeOperationNamespace }}\{{ type }};
{%     endfor %}
{%     if controller.body != null %}
use {{ typeOperationNamespace }}\{{ controller.body.typeInfo.operationsType }};
{%     endif %}

class {{ controller.controllerType }} {
  public function __construct(
    private ?{{ controller.actionType }} $action,
    private EntityManagerInterface $entityManager,
    private LoggerInterface $logger,
  ) {
  }

  /**
   * Для тестирования
   * @param EntityManagerInterface $entityManager
   */
  public function setEntityManager(EntityManagerInterface $entityManager): void {
    $this->entityManager = $entityManager;
  }

  public function {{ controller.actionMethod }}(Request $request): Response {
    try {
      $this->entityManager->beginTransaction();

{%     for parameter in controller.parameters %}
      ${{ parameter.name }}Decoded = {{ parameter.typeInfo.operationsType }}::decodeSimple($request->{{ parameter.bagName }}->{{ parameter.bagMethod }}('{{ parameter.name }}'));
      {{ parameter.typeInfo.operationsType }}::validate(decoded: ${{ parameter.name }}Decoded, name: '{{ parameter.name }}', {{ typeOptions(parameter.name, parameter.required, parameter.schema, components.schemas) }});
      ${{ parameter.name }} = {{ parameter.typeInfo.operationsType }}::createFromDecoded(decoded: ${{ parameter.name }}Decoded{{ arrayItemCreator(parameter.schema) }});

{%     endfor %}
{%     if controller.body != null %}
{%       set schema = request.requestBody.content['application/json'].schema %}
      $bodyDecoded = {{ controller.body.typeInfo.operationsType }}::decodeJson($request->getContent());
      {{ controller.body.typeInfo.operationsType }}::validate(decoded: $bodyDecoded, name: 'body', {{ typeOptions('body', true, schema, components.schemas) }});
      $body = {{ controller.body.typeInfo.operationsType }}::createFromDecoded(decoded: $bodyDecoded{{ arrayItemCreator(schema) }});

{%     endif %}
      $result = $this->action->{{ controller.actionMethod }}(
{%     for parameter in request.parameters %}
        ${{ parameter.name }},
{%     endfor %}
{%     if request.requestBody.content['application/json'] != null %}
        $body,
{%     endif %}
      );

      $this->entityManager->flush();
      $this->entityManager->commit();
    }
    catch (Exception $e) {
      $this->logger->error(
        sprintf('Uncaught PHP Exception %s: "%s" at %s line %s', $e::class, $e->getMessage(), $e->getFile(), $e->getLine()),
        ['exception' => $e]
      );
      $this->entityManager->rollBack();
      $result = $this->action->createExceptedResult($e);
    }

    ob_clean();

{%     for result in controller.results %}
{%       if result.statusCode != 'default' %}
    if ($result instanceof {{ result.type }}) {
      $headers = [
        'Content-Type' => 'application/json',
{%         for header in result.headers %}
        '{{ header.name }}' => json_encode($result->headers->{{ header.fieldName }}, JSON_UNESCAPED_UNICODE),
{%         endfor %}
      ];
      return new Response(
        {{ result.content.operationsType }}::encodeJson(value: $result->content{% if result.content.arrayItem != false %}, prepareItem: fn(mixed $item) => {{ result.content.arrayItem.operationsType }}::prepareToEncode($item){% endif %}),
        {{ result.statusCode }},
        $headers
      );
    }
{%       endif %}
{%     endfor %}

{%     for result in controller.results %}
{%       if result.statusCode == 'default' %}
    if ($result instanceof {{ result.type }}) {
      $headers = [
        'Content-Type' => 'application/json',
{%         for header in result.headers %}
        '{{ header.name }}' => json_encode($result->headers->{{ header.fieldName }}, JSON_UNESCAPED_UNICODE),
{%         endfor %}
      ];
      return new Response(
        {{ result.content.operationsType }}::encodeJson(value: $result->content{% if result.content.arrayItem != false %}, prepareItem: fn(mixed $item) => {{ result.content.arrayItem.operationsType }}::prepareToEncode($item){% endif %}),
        $result->statusCode,
        $headers
      );
    }
{%       endif %}
{%     endfor %}

    return new Response('', 500);
  }
}
{% endfor %}