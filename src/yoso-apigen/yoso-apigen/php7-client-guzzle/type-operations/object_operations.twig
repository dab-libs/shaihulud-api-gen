{% for schemaEntry in components.schemas %}
{%   set type = schemaEntry.key | upperCaseFirst %}
{%   set objectSchema = schemaEntry.value %}
{{   writeFile(typeOperationFolder ~ type ~ 'Operations.php') }}
<?php declare(strict_types=1);

namespace {{ typeOperationNamespace }};

use Exception;
use {{ publicNamespace ~ BACK_SLASH ~ type }};

class {{ type }}Operations {
  /**
   * @param object|null $decoded
   * @return {{ type }}|null
   */
  public static function createFromDecoded($decoded) {
    if ($decoded === null) {
      return null;
    }
    return new {{ type }}(
{%   for propertyEntry in objectSchema.properties | sortKeys %}
{%     set propertyName = propertyEntry.key %}
{%     set propertySchema = propertyEntry.value %}
{%     set required = objectSchema.required contains propertyName %}
      {{ operationsType(propertySchema, propertyName, type) }}::createFromDecoded(property_exists($decoded, '{{ propertyName }}') ? $decoded->{{ propertyName }} : null{{ arrayItemCreator(propertySchema) }}),
{%   endfor %}
    );
  }

  /**
   * @param {{ type }}|null $value
   * @return object|null
   */
  public static function prepareToEncode($value) {
    if ($value === null) {
      return null;
    }
    return (object) [
{%   for propertyEntry in objectSchema.properties %}
{%     set propertyName = propertyEntry.key %}
{%     set propertySchema = propertyEntry.value %}
{%     set required = objectSchema.required contains propertyName %}
      '{{ propertyName }}' => {{ operationsType(propertySchema, propertyName, type) }}::prepareToEncode($value->{{ propertyName }}{{ arrayItemPreparer(propertySchema) }}),
{%   endfor %}
    ];
  }

  /**
   * @param string|null $value
   * @return mixed
   */
  public static function decodeJson($value) {
    if ($value === null) {
      return null;
    }
    return json_decode($value);
  }

  /**
   * @param {{ type }}|null $value
   * @return string|null
   */
  public static function encodeJson($value) {
    if ($value === null) {
      return null;
    }
    return json_encode(self::prepareToEncode($value));
  }

  /**
   * @param array|null $value
   * @return mixed
   */
  public static function decodeSimple($value) {
    if ($value === null) {
      return null;
    }
    $decoded = [];
    for ($i = 1; $i < count($value); $i += 2) {
      $decoded[$value[$i - 1]] = json_decode($value[$i]);
    }
    return (object) $decoded;
  }

  /**
   * @param {{ type }}|null $value
   * @return array|null
   */
  public static function encodeSimple($value) {
    if ($value === null) {
      return null;
    }
    $encoded = [];
{%   for propertyEntry in objectSchema.properties %}
{%     set propertyName = propertyEntry.key %}
{%     set propertySchema = propertyEntry.value %}
{%     set required = objectSchema.required contains propertyName %}
    $encoded['{{ propertyName }}'] = json_encode({{ operationsType(propertySchema, propertyName, type) }}::prepareToEncode($value->{{ propertyName }}{{ arrayItemPreparer(propertySchema) }}));
{%   endfor %}
    return $encoded;
  }

  /**
   * @param mixed $decoded
   * @param string $name
   * @param bool $required
  * @return void
   * @throws Exception
   */
  public static function validate($decoded, $name, $required) {
    if ($decoded === null) {
      if ($required === true) {
        throw new Exception($name . ' is not found');
      }
      return;
    }
    if (!is_object($decoded)) {
      throw new Exception($name . ' is not an object');
    }
{%   for propertyEntry in objectSchema.properties | sortKeys %}
{%     set propertyName = propertyEntry.key %}
{%     set propertySchema = propertyEntry.value %}
{%     set required = objectSchema.required contains propertyName %}
    {{ operationsType(propertySchema, propertyName, type) }}::validate(property_exists($decoded, '{{ propertyName }}') ? $decoded->{{ propertyName }} : null, '{{ propertyName }}', {{ typeOptions(propertyName, required, propertySchema, components.schemas) }});
{%   endfor %}
  }
}
{% endfor %}
