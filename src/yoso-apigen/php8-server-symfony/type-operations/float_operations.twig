{{ writeFile(typeOperationFolder ~ 'FloatOperations.php') }}
<?php declare(strict_types=1);

namespace {{ typeOperationNamespace }};

use Exception;

class FloatOperations {
  public static function createFromDecoded(mixed $decoded): ?float {
    if ($decoded === null) {
      return null;
    }
    return floatval($decoded);
  }

  public static function prepareToEncode(?float $value): ?float {
    if ($value === null) {
      return null;
    }
    return floatval($value);
  }

  public static function decodeJson(?string $value): mixed {
    if ($value === null) {
      return null;
    }
    return json_decode($value);
  }

  public static function encodeJson(?float $value): ?string {
    if ($value === null) {
      return null;
    }
    return json_encode(self::prepareToEncode($value));
  }

  public static function decodeSimple(?string $value): mixed {
    if ($value === null) {
      return null;
    }
    $decoded = json_decode($value);
    if ($decoded === null) {
      return $value;
    }
    return $decoded;
  }

  public static function encodeSimple(?float $value): ?string {
    if ($value === null) {
      return null;
    }
    return (string) $value;
  }

  /** @throws Exception */
  public static function validate(mixed $decoded, string $name, bool $required, ?float $maximum, bool $exclusiveMaximum,
                                  ?float $minimum, bool $exclusiveMinimum, ?float $multipleOf) {
    if ($decoded === null) {
      if ($required === true) {
        throw new Exception($name . ' is not found');
      }
      return;
    }
    if (!is_float($decoded) && !is_integer($decoded)) {
      throw new Exception($name . ' is not a float');
    }
    self::validateMaximum($decoded, $name, $maximum, $exclusiveMaximum);
    self::validateMinimum($decoded, $name, $minimum, $exclusiveMinimum);
    self::validateMultipleOf($decoded, $name, $multipleOf);
  }

  public static function createForTest(): float {
    return 1.9;
  }

  /** @throws Exception */
  private static function validateMaximum(float $value, string $name, ?float $maximum, bool $exclusiveMaximum): void {
    if ($maximum === null) {
      return;
    }
    if ($exclusiveMaximum) {
      if ($value >= $maximum) {
        throw new Exception($name . ' is great or equal then ' . $maximum);
      }
    }
    else {
      if ($value > $maximum) {
        throw new Exception($name . ' is great then ' . $maximum);
      }
    }
  }

  /** @throws Exception */
  private static function validateMinimum(float $value, string $name, ?float $minimum, bool $exclusiveMinimum): void {
    if ($minimum === null) {
      return;
    }
    if ($exclusiveMinimum) {
      if ($value <= $minimum) {
        throw new Exception($name . ' is little or equal then ' . $minimum);
      }
    }
    else {
      if ($value < $minimum) {
        throw new Exception($name . ' is little then ' . $minimum);
      }
    }
  }

  /** @throws Exception */
  private static function validateMultipleOf(float $value, string $name, ?float $multipleOf): void {
    if ($multipleOf === null) {
      return;
    }
    if ($value % $multipleOf !== null) {
      throw new Exception($name . ' is not multiple of ' . $multipleOf);
    }
  }
}